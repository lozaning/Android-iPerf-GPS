// Generated by view binder compiler. Do not edit!
package com.example.androidproject.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.androidproject.R;
import com.example.androidproject.map.SpeedVisualizationMap;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityMarkApBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton autoTestButton;

  @NonNull
  public final ScrollView controlPanel;

  @NonNull
  public final TextView currentGpsText;

  @NonNull
  public final TextView currentGyroText;

  @NonNull
  public final TextView currentResultText;

  @NonNull
  public final RadioButton dataSizeMode;

  @NonNull
  public final MaterialButton doneButton;

  @NonNull
  public final RadioButton durationMode;

  @NonNull
  public final MaterialButton manualTestButton;

  @NonNull
  public final SpeedVisualizationMap markApMap;

  @NonNull
  public final LinearLayout markApMapControlsContainer;

  @NonNull
  public final MaterialButton markApRecenterButton;

  @NonNull
  public final MaterialButton markApSatelliteToggleButton;

  @NonNull
  public final TextView previousResultText;

  @NonNull
  public final RadioGroup testModeGroup;

  @NonNull
  public final EditText testValueInput;

  private ActivityMarkApBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton autoTestButton, @NonNull ScrollView controlPanel,
      @NonNull TextView currentGpsText, @NonNull TextView currentGyroText,
      @NonNull TextView currentResultText, @NonNull RadioButton dataSizeMode,
      @NonNull MaterialButton doneButton, @NonNull RadioButton durationMode,
      @NonNull MaterialButton manualTestButton, @NonNull SpeedVisualizationMap markApMap,
      @NonNull LinearLayout markApMapControlsContainer,
      @NonNull MaterialButton markApRecenterButton,
      @NonNull MaterialButton markApSatelliteToggleButton, @NonNull TextView previousResultText,
      @NonNull RadioGroup testModeGroup, @NonNull EditText testValueInput) {
    this.rootView = rootView;
    this.autoTestButton = autoTestButton;
    this.controlPanel = controlPanel;
    this.currentGpsText = currentGpsText;
    this.currentGyroText = currentGyroText;
    this.currentResultText = currentResultText;
    this.dataSizeMode = dataSizeMode;
    this.doneButton = doneButton;
    this.durationMode = durationMode;
    this.manualTestButton = manualTestButton;
    this.markApMap = markApMap;
    this.markApMapControlsContainer = markApMapControlsContainer;
    this.markApRecenterButton = markApRecenterButton;
    this.markApSatelliteToggleButton = markApSatelliteToggleButton;
    this.previousResultText = previousResultText;
    this.testModeGroup = testModeGroup;
    this.testValueInput = testValueInput;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityMarkApBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityMarkApBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_mark_ap, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityMarkApBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.autoTestButton;
      MaterialButton autoTestButton = ViewBindings.findChildViewById(rootView, id);
      if (autoTestButton == null) {
        break missingId;
      }

      id = R.id.controlPanel;
      ScrollView controlPanel = ViewBindings.findChildViewById(rootView, id);
      if (controlPanel == null) {
        break missingId;
      }

      id = R.id.currentGpsText;
      TextView currentGpsText = ViewBindings.findChildViewById(rootView, id);
      if (currentGpsText == null) {
        break missingId;
      }

      id = R.id.currentGyroText;
      TextView currentGyroText = ViewBindings.findChildViewById(rootView, id);
      if (currentGyroText == null) {
        break missingId;
      }

      id = R.id.currentResultText;
      TextView currentResultText = ViewBindings.findChildViewById(rootView, id);
      if (currentResultText == null) {
        break missingId;
      }

      id = R.id.dataSizeMode;
      RadioButton dataSizeMode = ViewBindings.findChildViewById(rootView, id);
      if (dataSizeMode == null) {
        break missingId;
      }

      id = R.id.doneButton;
      MaterialButton doneButton = ViewBindings.findChildViewById(rootView, id);
      if (doneButton == null) {
        break missingId;
      }

      id = R.id.durationMode;
      RadioButton durationMode = ViewBindings.findChildViewById(rootView, id);
      if (durationMode == null) {
        break missingId;
      }

      id = R.id.manualTestButton;
      MaterialButton manualTestButton = ViewBindings.findChildViewById(rootView, id);
      if (manualTestButton == null) {
        break missingId;
      }

      id = R.id.markApMap;
      SpeedVisualizationMap markApMap = ViewBindings.findChildViewById(rootView, id);
      if (markApMap == null) {
        break missingId;
      }

      id = R.id.markApMapControlsContainer;
      LinearLayout markApMapControlsContainer = ViewBindings.findChildViewById(rootView, id);
      if (markApMapControlsContainer == null) {
        break missingId;
      }

      id = R.id.markApRecenterButton;
      MaterialButton markApRecenterButton = ViewBindings.findChildViewById(rootView, id);
      if (markApRecenterButton == null) {
        break missingId;
      }

      id = R.id.markApSatelliteToggleButton;
      MaterialButton markApSatelliteToggleButton = ViewBindings.findChildViewById(rootView, id);
      if (markApSatelliteToggleButton == null) {
        break missingId;
      }

      id = R.id.previousResultText;
      TextView previousResultText = ViewBindings.findChildViewById(rootView, id);
      if (previousResultText == null) {
        break missingId;
      }

      id = R.id.testModeGroup;
      RadioGroup testModeGroup = ViewBindings.findChildViewById(rootView, id);
      if (testModeGroup == null) {
        break missingId;
      }

      id = R.id.testValueInput;
      EditText testValueInput = ViewBindings.findChildViewById(rootView, id);
      if (testValueInput == null) {
        break missingId;
      }

      return new ActivityMarkApBinding((ConstraintLayout) rootView, autoTestButton, controlPanel,
          currentGpsText, currentGyroText, currentResultText, dataSizeMode, doneButton,
          durationMode, manualTestButton, markApMap, markApMapControlsContainer,
          markApRecenterButton, markApSatelliteToggleButton, previousResultText, testModeGroup,
          testValueInput);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
